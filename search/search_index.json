{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Numpydoclint is a linter for Numpy style  docstrings.</p> numpydoclint -vv asgard midgard/thor.pyasgard/loki.py:12 in function asgard.loki.mischief:    GL03 Double line break foundasgard/odin.py:10 in type asgard.odin.Allfather:    SA04 Missing description for See Also 'Yggdrasil' referencemidgard/thor.py:20 in function thor.Thor.strike:    PR01 Parameters {'mjolnir'} not documentedErrors found in 3 out of 9 objects checked. <p>Numpydoclint uses static file analysis to identify code objects and then uses the <code>numpydoc.validate</code>  module for validation, outputting corresponding error codes  along with explanatory comments.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install Numpydoclint via the PIP  package manager:</p> <pre><code>$ pip install numpydoc-linter\n</code></pre> <p>Alternatively, if you wish to install from the source code, follow these steps. Clone the repository and use Poetry  to manage the project dependencies specified in <code>pyproject.toml</code>:</p> <pre><code>$ git clone https://github.com/nickuzmenkov/numpydoclint.git\n$ cd numpydoclint\n$ poetry install\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Basic usage examples can be found in the Quickstart section. More advanced usage scenarios and available options are covered in detail in the Complete Reference.</p>"},{"location":"complete_reference/","title":"Complete Reference","text":"<p>This guide provides detailed information about all configuration options available in Numpydoclint.</p>"},{"location":"complete_reference/#command-line-arguments","title":"Command Line  Arguments","text":"<p>This section lists all the arguments available from the command line.</p>"},{"location":"complete_reference/#paths","title":"<code>PATHS</code>","text":"<p>Specify one or more paths to be validated. Paths can be directories or modules. If the path is a directory, all modules will be searched <code>filename_pattern</code>. All paths must be in your <code>sys.path</code>. You must have all dependencies installed, because <code>numpydoc.validate</code>  used under the hood imports your module for validation.</p>"},{"location":"complete_reference/#-e-ignore_errors","title":"<code>-e</code>, <code>--ignore_errors</code>","text":"<p>Comma-separated set of error codes to ignore (for example, <code>ES01,GL08</code>). See the Numpydoc documentation  for a complete  reference.</p>"},{"location":"complete_reference/#-p-ignore_paths","title":"<code>-p</code>, <code>--ignore_paths</code>","text":"<p>Comma-separated list of paths to ignore. Can be directories or files. If the path is a directory, all files in that directory will be ignored. If you need to ignore specific patterns in filenames, consider using <code>filename_pattern</code> instead.</p> Example <p>Suppose you have the following file structure:</p> <pre><code>asgard/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 bifrost.py\n\u251c\u2500\u2500 odin.py\n\u251c\u2500\u2500 loki.py\n\u251c\u2500\u2500 valhalla/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 einherjar.py\n\u2502   \u251c\u2500\u2500 valkyries.py\n\u2502   \u2514\u2500\u2500 feast.py\n</code></pre> <p>The following command will only validate the <code>asgard/bifrost.py</code>, <code>asgard/odin.py</code>, as well as both <code>__init__.py</code> modules:</p> <pre><code>$ numpydoclint asgard --ignore_paths=asgard/loki.py,asgard/valhalla\n</code></pre>"},{"location":"complete_reference/#-h-ignore-hidden","title":"<code>-h</code>, <code>--ignore-hidden</code>","text":"<p>Flag argument that tells Numpydoclint to ignore hidden objects. Hidden objects are objects whose names begin with an underscore (<code>_</code>). Note that this includes all dunder methods of the classes, but not hidden modules. The default is False.</p> <p>Note</p> <p>Even without this flag, all class constructors are always ignored.</p> Example <p>Suppose you have a <code>thor.py</code> module with the following contents:</p> thor.py<pre><code>def _battle_cry(cry: str) -&gt; None:\n    print(f\"Hear my battle cry: {cry}!\")\n\nclass _Mjolnir:\n    pass\n\nclass Thor:\n    def __init__(self) -&gt; None:\n        self.strength = float(inf)\n\n    def strike(self, mjolnir: _Mjolnir) -&gt; None:\n        print(f\"Thor strikes with his {mjolnir}!\")\n</code></pre> <p>Running the following command <code>numpydoclint --ignore-hidden</code> flag will skip the hidden <code>_battle_cry</code> function and <code>_Mjolnir</code> class. If there were any dunder methods or objects starting with more than one underscore, they would have been skipped as well.</p>"},{"location":"complete_reference/#-f-filename_pattern","title":"<code>-f</code>, <code>--filename_pattern</code>","text":"<p>Filename pattern to include. Note that this is not a wildcard but a regex pattern, so for example <code>*.py</code> will not compile. The default is any file with a <code>.py</code> extension.</p> Example <p>Suppose you have the following file structure:</p> <pre><code>asgard/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 bifrost.py\n\u251c\u2500\u2500 odin.py\n\u251c\u2500\u2500 loki.py\n\u251c\u2500\u2500 valhalla/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 einherjar.py\n\u2502   \u251c\u2500\u2500 valkyries.py\n\u2502   \u2514\u2500\u2500 feast.py\n</code></pre> <p>The following command will skip both <code>__init__.py</code> modules:</p> <pre><code>$ numpydoclint asgard --filename_pattern='^(?!__).+.py$'\n</code></pre> <p>While the following command will only match filenames ending in <code>st.py</code>, namely, <code>asgard/bifrost.py</code> and <code>asgard/valhalla/feast.py</code>:</p> <pre><code>$ numpydoclint asgard --filename_pattern='^.*st.py$'\n</code></pre>"},{"location":"complete_reference/#-v-verbose","title":"<code>-v</code>, <code>--verbose</code>","text":"<p>Count argument representing the verbosity level of the linter output. Possible values are:</p> <ul> <li>no flag (default): print only the number of errors found.</li> <li><code>-v</code>: show information about the objects and the corresponding error codes.</li> <li><code>-vv</code>: also add comments for each error.</li> </ul> <p>See the Verbosity section for an interactive example.</p>"},{"location":"complete_reference/#special-comments","title":"Special Comments","text":"<p>This section outlines special comments that can be used to ignore certain objects or certain errors only for those objects. See the Special Comments section in the Quickstart guide for a basic example.</p> <p>There are basically two types of special comment: regular and recursive. The former applies only to an object itself (e.g. a class or a module), while the latter also applies to all child objects (i.e. all methods in a class, or all functions and classes in a module).</p> <p>Note</p> <p>As functions do not have child objects, they can be ignored by both.</p> <p>To ignore specific errors for these objects only, you can also add a list of codes to ignore to one of the comments to ignore errors for the object, or to ignore them for the object and all child objects. Let's look at some examples.</p>"},{"location":"complete_reference/#numpydoclint-ignore","title":"<code>numpydoclint: ignore</code>","text":"<p>This tells Numpydoclint to ignore the object or, which is the same, to ignore all errors for the object. To ignore some specific errors for this object instead, you should add a comma-separated list of error codes  after the directive, followed by a space or an equal sign.</p> <p>Example</p> <p>Examples of valid comments are:</p> <ul> <li><code>numpydoclint: ignore</code> (ignore all errors)</li> <li><code>numpydoclint: ignore=RT01</code> (ignore 'No Returns section found' error)</li> <li><code>numpydoclint: ignore GL01,ES01</code> (you can use a space instead of an equal sign)</li> <li><code>numpydoclint: ignore = EX01, PR01, SS01</code> (you can add extra spaces)</li> </ul>"},{"location":"complete_reference/#numpydoclint-ignore-all","title":"<code>numpydoclint: ignore-all</code>","text":"<p>This tells Numpydoclint to ignore the object and all its children: all methods if it's a class, and all classes and functions if it's a module. To ignore some specific errors for this object instead, you should also add a comma-separated list of error codes  after the directive, followed by a space or an equal sign.</p> <p>See the example above for a list of legal commands.</p>"},{"location":"complete_reference/#configuration-files","title":"Configuration Files","text":"<p>Numpydoclint allows flexible configuration using configuration files in addition to command line arguments. Currently supported configuration files are:</p> <ul> <li><code>setup.cfg</code> (in the current directory)</li> <li><code>pyproject.toml</code> (in the current directory)</li> </ul> <p>Regardless of which config file you use, note that all dashes in all parameters must be replaced with underscores. For example, <code>ignore-paths</code> becomes <code>ignore_paths</code>. </p> <p>Here's an example of a <code>pyproject.toml</code> configuration file with all available parameters set:</p> pyproject.toml<pre><code>[tool.numpydoclint]\nignore_errors = [\"ES01\", \"EX01\"]\nignore_paths = \"asgard/loki.py\"\nignore_hidden = true\nfilename_pattern = \"^(?!__).+.py$\"\n</code></pre>"},{"location":"complete_reference/#configuration-priority","title":"Configuration Priority","text":"<p>Configuration files and command line arguments are processed in the following order, from highest to lowest:</p> <ul> <li>Command line arguments: All arguments given directly on the command line have the highest priority. These arguments override any conflicting settings in the configuration files.</li> <li><code>pyproject.toml</code>: If there is a <code>pyproject.toml</code> file in the current working directory, and it has a <code>[tool.numpydoclint]</code> section defined, Numpydoclint will use the settings from that section.</li> <li><code>setup.cfg</code>: If there is a <code>setup.cfg</code> file in the current working directory, and it has a <code>[numpydoclint]</code> section defined in it, Numpydoclint will use the settings from that section.</li> </ul> Example <p>Suppose you have the following configuration files in your current project directory:</p> pyproject.toml<pre><code>[tool.numpydoclint]\nignore_errors = [\"ES01\", \"EX01\"]\n</code></pre> setup.cfg<pre><code>[numpydoclint]\nignore_errors = RT01, GL08\nfilename_pattern = '^(?!__).+.py$'\n</code></pre> <p>Running <code>numpydoclint asgard/</code> will use the filename pattern specified in the <code>setup.cfg</code>, while the ignored errors from <code>setup.cfg</code> will be overridden by the values in the <code>pyproject.toml</code> file.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This section will give you a basic understanding of Numpydoclint's capabilities. If you encounter scenarios that go beyond this tutorial, you can find more information in the Complete Reference.</p>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":"<p>Numpydoclint makes it easy to validate all objects in a package or a series of packages:</p> numpydoclint -vv asgard midgardasgard/loki.py:12 in function asgard.loki.mischief:    GL03 Double line break foundasgard/odin.py:10 in type asgard.odin.Allfather:    SA04 Missing description for See Also 'Yggdrasil' referencemidgard/thor.py:20 in function thor.Thor.strike:    PR01 Parameters {'mjolnir'} not documentedErrors found in 3 out of 9 objects checked. <p>Imports ahead</p> <p>For accurate validation, ensure that your <code>sys.path</code> contains all relevant paths, that all necessary dependencies are installed, and that resource-intensive code is confined within the <code>if __name__ == \"__main__\"</code> block.</p> <p>You can also validate standalone modules:</p> numpydoclint -vv midgard/thor.pymidgard/thor.py:20 in function thor.Thor.strike:    PR01 Parameters {'mjolnir'} not documentedErrors found in 1 out of 3 objects checked. <p>Tip</p> <p>Package and module paths can be mixed within a single run.</p>"},{"location":"quickstart/#verbosity","title":"Verbosity","text":"<p>By default, Numpydoclint only prints the number of errors found. You can also set the verbosity level to suit your needs: a single verbosity flag shows information about the object and the corresponding error codes, while a double verbosity flag also adds comments:</p> numpydoclint asgardErrors found in 3 out of 6 objects checked.numpydoclint asgard -vasgard/loki.py:12 in function asgard.loki.mischief: GL03asgard/odin.py:10 in type asgard.odin.Allfather: SA04Errors found in 3 out of 6 objects checked.numpydoclint asgard -vvasgard/loki.py:12 in function asgard.loki.mischief:    GL03 Double line break foundasgard/odin.py:10 in type asgard.odin.Allfather:    SA04 Missing description for See Also 'Yggdrasil' referenceErrors found in 3 out of 6 objects checked."},{"location":"quickstart/#filtering-options","title":"Filtering Options","text":"<p>Numpydoclint introduces flexible filtering options to tailor the validation process to your needs. These options include global settings such as ignoring certain errors or files, either via the command line or within your configuration files. In addition, Numpydoclint supports special comments for more precise targeting.</p>"},{"location":"quickstart/#global-options","title":"Global Options","text":"<p>These global options allow you to bypass certain validation checks  and to exclude files by path or name using regular expressions. See the example below:</p> <pre><code>$ numpydoclint asgard \\\n--ignore-errors ES01 \\ # (1)\n--ignore-paths midgard/loki.py \\ # (2)\n--filename-pattern '^(?!__).+.py$' # (3)\n</code></pre> <ol> <li>Suppress 'No extended summary found' (<code>ES01</code>) errors from the validation process.</li> <li>Exclude the <code>loki.py</code> module from validation.</li> <li>Exclude modules starting with a double underscore (<code>__</code>) using regex  filename pattern.</li> </ol> <p>Filename Pattern</p> <p>The pattern should match only the file name, not the full path. The default pattern matches any file with the <code>.py</code> extension.</p> <p>To learn more about each argument and how to provide arguments through your configuration files, please refer to the appropriate section of our Complete Reference guide.</p>"},{"location":"quickstart/#special-comments","title":"Special Comments","text":"<p>For granular control, numpydoclint provides special comments to ignore certain objects or error codes . Use <code>numpydoclint: ignore</code> to omit an object's docstring, and <code>numpydoclint: ignore-all</code> to exclude both the object's docstring and all of its child objects.</p> <p>In addition, errors specific to an object or its child objects can be ignored by appending the appropriate error codes to the directives. Consider the following example:</p> thor.py<pre><code># numpydoclint: ignore-all GL08,ES01 # (1)\n\"\"\"Thor, the God of Thunder.\"\"\"\nfrom jotunheim import Jotun\n\nclass Mjolnir:\n\"\"\"Mjolnir: Thor's fearsome and potent weapon.\"\"\"\n\nclass Thor:  # numpydoclint: ignore # (2)\n\"\"\"Thor: Norse God of Thunder.\"\"\"\n\n    def __init__(self) -&gt; None: # (3)\n        self.strength = float(inf)\n\n    def strike(self, mjolnir: Mjolnir, jotun: Jotun):  # (4)\n\"\"\"Thor strikes a jotun with Mjolnir.\n\n        Parameters\n        ----------\n        jotun : Jotun\n            A mighty giant.\n        \"\"\"\n        print(f\"Thor strikes {jotun.name} with Mjolnir!\")\n</code></pre> <ol> <li>Suppress 'The object does not have a docstring' (<code>GL08</code>) and 'No extended summary found' (<code>ES01</code>) errors for all objects within this module.</li> <li>Ignore the main docstring of the <code>Thor</code> class.</li> <li>All class constructors are always ignored.</li> <li>Note that the <code>strike</code> method will not be ignored. To ignore all methods too, use <code>numpydoclint: ignore-all</code>.</li> </ol> <p>Note</p> <p>Place directives on the line of the object definition. For directives at module level, they should appear on the first line or before the first statement in the module.</p> <p>For more information on special comments, please refer to the relevant section of our Complete Reference guide.</p>"},{"location":"release_notes/","title":"Release Notes","text":""},{"location":"release_notes/#030-27th-august-2023","title":"0.3.0 (27th August, 2023)","text":""},{"location":"release_notes/#added","title":"Added","text":"<ul> <li>Added option to ignore hidden objects.</li> </ul>"},{"location":"release_notes/#020-26th-august-2023","title":"0.2.0 (26th August, 2023)","text":""},{"location":"release_notes/#added_1","title":"Added","text":"<ul> <li>Initial version.</li> </ul>"}]}